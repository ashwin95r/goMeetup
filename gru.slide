GRU: Adaptive quiz tool 
16 July 2016 [My first talk]
Tags: go golang Dgraph GRU Quiz

Ashwin
ashwin2007ray@gmail.com

* Agenda
- Protocol Buffers
- gRPC
- Context
- Other titbits from GRU

With reference to GRU

* GRU

- At Dgraph, we refer to the team members as Minions
- GRU is a character responsible for hiring thr right minions
- Open-source, Adaptive, Commandline Quiz tool

.image Gru.jpg _ 200

* Motivation

- Not many good platforms to screen candidates or are expensive
- Quiz found better than actual coding problems
- Adaptive quiz to judge candidates accurately
- Commandline - So you gotta use it!
- For more details  
.link https://wiki.dgraph.io/GRU Dgraph wiki

* Protocol Buffers
- Binary encoding format 
- Allows specification of schema
- Language-neutral, Platform-neutral 
- Backward compatible
- Smaller, faster, Simpler

* Sample Proto File 
.code proto-example

* Working
- Proto file is compiled using proto
- This compiled file is used to encode and decode the data


* gRPC
- language-neutral, platform-neutral
- Uses Protocol Buffers as the Serialization format
- Eg. Dgraph is written in go and has clients in Python, Java, Go

* gRPC Features 
- Supported in many languages (More than 10 famous ones) 
- HTTP2 - Bidrectional streaming
- Authentication, load balancing
- logging and monitoring. We use it in Dgraph
.link http://dgraph.xyz/debug/requests?fam=Dgraph&b=0&exp=1

* Sample gRPC file
.code proto-example

* Authentication using gRPC
.code auth-client

.code auth-server

* Context
- Deadlines
- Cancelation signals
- Other request-scoped values (like Request ID, Username)

.image rpc_flow.png
.caption Image: [[http://www.slideshare.net/exotel/gophercon-talk-by-smita-vijayakumar-gos-context-library][source]]

* How to use it?
- Its methods are safe for simultaneous use by multiple goroutines
- Should ideally be the first parameter in any function call

* Uses
- Distributed tracing
- Request cancellation
- Passing context-based values

* Example Use
- Each incoming request is handled in its own goroutine
- Further start additional goroutines to access backends [Call other servers, DB, etc.]
- Share request specific values across coworking Go-routines
- On request cancel or time-out: Goroutines working on that request should exit

* Definition
.code context.txt

* Types of Nodes
- TODO Node
	Dummy context (In case you want to use it in future)
- Background/root Node
	ctx = context.Background()
- Value Node
	ctxWithVal = context.WithValue(ctx, "Name", "Alice")
- Cancellable Node
	ctxC, Cancel = context.WithCancel(ctx)
	ctxC, Cancel = context.WithTimeout(ctx, <time-difference>)
	ctxC, Cancel = context.WithDeadline(ctx, <time>)

* Example
.code proto-code

* Rate-limiting
.code rate-limit

* Gru-client
.link https://drive.google.com/open?id=0B9cl-atGkz1cZFNpRzNGTFFFUEE

* References 
.link https://developers.google.com/protocol-buffers/
.link https://goel.io/grpc-100/
.link https://blog.golang.org/context
.link https://talks.golang.org/2014/gotham-context.slide#13
.link http://www.slideshare.net/exotel/gophercon-talk-by-smita-vijayakumar-gos-context-library